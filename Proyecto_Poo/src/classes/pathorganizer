package manejoeventos;

import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.animation.PathTransition;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.event.EventType;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.stage.WindowEvent;

/**
 *
 * @author Administrator
 */
public class PaneOrganizer {

    Random ran = new Random();
    int nivel;
    List<Jugador> list = Jugador.leer();
    Scene scene1 = new Scene(new Pane(), 500, 500);
    int valorDeta = 5;
    int i = 0;
    int i2 = 0;
    Pane root = new Pane();
    Scene scene;
    TextField nick = new TextField();
    int x = ran.nextInt(500 - 0 + 1) + 0;
    int y = ran.nextInt(500 - 50 + 1) + 0;
    ImageView araña = new ImageView(new Image("arana.png"));
    Group root1 = new Group();
    int puntaje = 0;
    Label puntajet = new Label();
    boolean tela = false;
    Pane telar = new Pane();
    int insectos = 0;
    int i3;
    int vidas = 3;
    Label vidast;
    Stage stage = new Stage();
    Scene scene2;
    int moscas2 = 20;
    int hormigas2 = 20;
    PathTransition pathTransitionL = new PathTransition();
    Label posiscionsub = new Label();
    boolean b = false;

    public Pane getroot(Scene scene, Stage pstage) {
        stage = pstage;
        this.scene = scene;
        vidast = new Label("Vidas: 3");
        ImageView hoja = new ImageView(new Image("hoja.png"));
        puntajet.setText("Puntaje: 000");
        araña.setFitWidth(25);
        araña.setFitHeight(25);

        AnchorPane anchor = new AnchorPane();
        ImageView ims = new ImageView(new Image("escena3.jpg"));

        VBox root0 = new VBox();
        Label nombre = new Label("Ingrese su nick");
        nombre.setStyle("-fx-text-fill: white;");

        Button btn1 = new Button("Nuevo Juego");
        Button btn2 = new Button("Historial");
        Button btn3 = new Button("Salir");
        Button btn4 = new Button("Salir");
        root0.getChildren().addAll(nombre, nick, btn1, btn2, btn3);
        root0.setAlignment(Pos.CENTER);
        root0.setSpacing(5);
        root0.setLayoutX(190);
        root0.setLayoutY(190);
        anchor.getChildren().addAll(ims, root0);
        root.getChildren().add(anchor);

//        Reloj
        Group root1 = new Group();

        root1.getChildren().addAll(posiscionsub, puntajet, vidast);
        puntajet.setLayoutX(100);
        puntajet.setLayoutY(6);
        vidast.setLayoutX(250);
        vidast.setLayoutY(6);
        posiscionsub.setLayoutX(10);
        posiscionsub.setLayoutY(6);
        btn4.setLayoutX(400);
        btn4.setLayoutY(2);
        root1.getChildren().add(btn4);
        root1.getChildren().add(araña);
//INSECTOS NIVEL 1
        Image imgh = new Image("hormiga.png");
        ImageView imgvh1 = new ImageView(imgh);
        imgvh1.setFitHeight(25);
        imgvh1.setFitWidth(25);
        ImageView imgvh2 = new ImageView(imgh);
        imgvh2.setFitHeight(25);
        imgvh2.setFitWidth(25);
        ImageView imgvh3 = new ImageView(imgh);
        imgvh3.setFitHeight(25);
        imgvh3.setFitWidth(25);
        ImageView imgvh4 = new ImageView(imgh);
        imgvh4.setFitHeight(25);
        imgvh4.setFitWidth(25);
        ImageView imgvh5 = new ImageView(imgh);
        imgvh5.setFitHeight(25);
        imgvh5.setFitWidth(25);

//        Creacion del nodo para la lagartija
        Image imgl = new Image("lagartija.png");
        ImageView imgvl = new ImageView(imgl);
        imgvl.setFitHeight(25);
        imgvl.setFitWidth(25);

//Creacion del nodo para las moscas
        Image imgm = new Image("mosca.png");
        ImageView imgvm1 = new ImageView(imgm);
        imgvm1.setFitHeight(25);
        imgvm1.setFitWidth(25);
        ImageView imgvm2 = new ImageView(imgm);
        imgvm2.setFitHeight(25);
        imgvm2.setFitWidth(25);
        ImageView imgvm3 = new ImageView(imgm);
        imgvm3.setFitHeight(25);
        imgvm3.setFitWidth(25);
        ImageView imgvm4 = new ImageView(imgm);
        imgvm4.setFitHeight(25);
        imgvm4.setFitWidth(25);

//Creacion del nodo para la telarana
        Image imgt = new Image("telarana.png");
        ImageView imgvt = new ImageView(imgt);
        imgvt.setVisible(false);
        imgvt.setFitHeight(50);
        imgvt.setFitWidth(50);

        //hormigas agregadas al pane 
        root1.getChildren().addAll(imgvh1, imgvh2, imgvh3, imgvh4, imgvh5, imgvt);

        //Moscas agregadas al pane
        root1.getChildren().addAll(imgvm1, imgvm2, imgvm3, imgvm4);

        root1.getChildren().addAll(imgvl);

        //Animaciones hormigas    
        PathHormiga ph1 = new PathHormiga(Pointx(), Pointy());
        PathHormiga ph2 = new PathHormiga(Pointx(), Pointy());
        PathHormiga ph3 = new PathHormiga(Pointx(), Pointy());
        PathHormiga ph4 = new PathHormiga(Pointx(), Pointy());
        PathHormiga ph5 = new PathHormiga(Pointx(), Pointy());

        PathTransition pathTransition = new PathTransition();
        pathTransition.setDuration(javafx.util.Duration.millis(3000));
        pathTransition.setNode(imgvh1);
        pathTransition.setOnFinished(e -> {
            pathTransition.setPath(ph1.createPath(ph1));
            pathTransition.play();
        });
        PathTransition pathTransition2 = new PathTransition();
        pathTransition2.setDuration(javafx.util.Duration.millis(3000));
        pathTransition2.setNode(imgvh2);
        pathTransition2.setOnFinished(e -> {
            pathTransition2.setPath(ph2.createPath(ph2));
            pathTransition2.play();
        });
        PathTransition pathTransition3 = new PathTransition();
        pathTransition3.setDuration(javafx.util.Duration.millis(3000));
        pathTransition3.setNode(imgvh3);
        pathTransition3.setOnFinished(e -> {
            pathTransition3.setPath(ph3.createPath(ph3));
            pathTransition3.play();
        });
        PathTransition pathTransition4 = new PathTransition();
        pathTransition4.setDuration(javafx.util.Duration.millis(3000));
        pathTransition4.setNode(imgvh4);
        pathTransition4.setOnFinished(e -> {
            pathTransition4.setPath(ph4.createPath(ph4));
            pathTransition4.play();
        });
        PathTransition pathTransition5 = new PathTransition();
        pathTransition5.setDuration(javafx.util.Duration.millis(3000));
        pathTransition5.setNode(imgvh5);
        pathTransition5.setOnFinished(e -> {
            pathTransition5.setPath(ph5.createPath(ph5));
            pathTransition5.play();
        });

        //Animacion Moscas
        PathMosca pm1 = new PathMosca(Pointx(), Pointy());
        PathMosca pm2 = new PathMosca(Pointx(), Pointy());
        PathMosca pm3 = new PathMosca(Pointx(), Pointy());
        PathMosca pm4 = new PathMosca(Pointx(), Pointy());

        PathTransition pathTransitionM1 = new PathTransition();
        pathTransitionM1.setDuration(javafx.util.Duration.millis(2000));
        pathTransitionM1.setNode(imgvm1);
        pathTransitionM1.setOnFinished(e -> {
            pathTransitionM1.setPath(pm1.createPath(pm1));
            pathTransitionM1.play();
        });
        PathTransition pathTransitionM2 = new PathTransition();
        pathTransitionM2.setDuration(javafx.util.Duration.millis(2000));
        pathTransitionM2.setNode(imgvm2);
        pathTransitionM2.setOnFinished(e -> {
            pathTransitionM2.setPath(pm2.createPath(pm2));
            pathTransitionM2.play();
        });
        PathTransition pathTransitionM3 = new PathTransition();
        pathTransitionM3.setDuration(javafx.util.Duration.millis(2000));
        pathTransitionM3.setNode(imgvm3);
        pathTransitionM3.setOnFinished(e -> {
            pathTransitionM3.setPath(pm3.createPath(pm3));
            pathTransitionM3.play();
        });
        PathTransition pathTransitionM4 = new PathTransition();
        pathTransitionM4.setDuration(javafx.util.Duration.millis(2000));
        pathTransitionM4.setNode(imgvm4);
        pathTransitionM4.setOnFinished(e -> {
            pathTransitionM4.setPath(pm4.createPath(pm4));
            pathTransitionM4.play();
        });
//      Animacion lagartija
        PathMosca pl = new PathMosca(pointLagx(), pointLagy());
        pathTransitionL.setDuration(javafx.util.Duration.millis(3000));
        pathTransitionL.setNode(imgvl);
        pathTransitionL.setOnFinished(e -> {
            pathTransitionL.setPath(pl.createPath(pl));
            pathTransitionL.play();
        });
        
        araña.setX(250);
        araña.setY(250);
        AnchorPane anchor2 = new AnchorPane();
        ImageView im3 = new ImageView(new Image("arena1.jpg"));

        anchor2.getChildren().addAll(im3, root1);

        AnchorPane anch = new AnchorPane();
        VBox vb = new VBox();
        Label label1 = new Label("Ingrese el numero de moscas para el proximo nivel:");
        label1.setStyle("-fx-text-fill: white;");
        Label label2 = new Label("Ingrese el numero de hormigas para el proximo nivel:");
        label2.setStyle("-fx-text-fill: white;");
        TextField moscas = new TextField();
        TextField hormigas = new TextField();
        Button btna = new Button("Aceptar");
        vb.getChildren().addAll(label1, moscas, label2, hormigas, btna);
        vb.setSpacing(10);
        vb.setAlignment(Pos.CENTER);
        vb.setLayoutX(90);
        vb.setLayoutY(150);

        anch.getChildren().addAll(new ImageView(new Image("escena3.jpg")), vb);
        scene2 = new Scene(anch, 500, 500);

        scene1 = new Scene(anchor2, 500, 500);
        //mover la arana
        scene1.setOnKeyPressed((KeyEvent e) -> {
            if (b) {
                if (araña.intersects(hoja.getBoundsInParent())) {
                    valorDeta = 2;
                }}
                switch (e.getCode()) {
                    case UP:

                        araña.setY(araña.getY() - valorDeta);
                        break;
                    case RIGHT:
                        araña.setX(araña.getX() + valorDeta);
                        break;

                    case LEFT:
                        araña.setX(araña.getX() - valorDeta);
                        break;

                    case DOWN:
                        araña.setY(araña.getY() + valorDeta);
                        break;
                }

                if (araña.getLayoutBounds().getMinX() < 0) {
                    araña.setX(0);
                } else if (araña.getLayoutBounds().getMaxX() > scene1.getWidth()) {
                    araña.setX(araña.getX() - valorDeta);
                }

                if (araña.getLayoutBounds().getMinY() < 35) {
                    araña.setY(35);
                } else if (araña.getLayoutBounds().getMaxY() > scene1.getHeight()) {
                    araña.setY(araña.getY() - valorDeta);
                }
                valorDeta = 5;
            }
            );

        //cierra el juego desde el menu
        btn3.setOnAction(new EventHandler<ActionEvent>() {
                @Override
                public void handle(ActionEvent event) {
                    pstage.close();
                }

            });
            //cierra el juego desde la ventana ejecutandose
            btn4.setOnAction(new EventHandler<ActionEvent>() {
                @Override
                public void handle(ActionEvent event) {
                    Stage stage0 = new Stage();
                    VBox vbox = new VBox();
                    Label lbq = new Label("Seguro que desea terminar el juego?");
                    Button btnq = new Button("Si");
                    Button btnq1 = new Button("No");
                    HBox hbox = new HBox();
                    hbox.getChildren().addAll(btnq, btnq1);
                    vbox.getChildren().addAll(lbq, hbox);
                    Scene sceneq = new Scene(vbox, 200, 200);
                    stage0.setTitle("Salir");
                    stage0.setScene(sceneq);
                    stage0.show();
                    btnq1.setOnAction(new EventHandler<ActionEvent>() {
                        @Override
                        public void handle(ActionEvent arg0) {
                            stage0.close();
                        }
                    });
                    btnq.setOnAction(new EventHandler<ActionEvent>() {
                        @Override
                        public void handle(ActionEvent arg0) {
                            stage0.close();
                            Jugador p = new Jugador(nick.getText(), posiscionsub.getText(), nivel, puntaje);
                            p.escribir();
                            pstage.close();
                            if (list != null) {
                                list.add(p);
                            }
                            p.escribir();
                            if (list == null) {
                                list = Jugador.leer();
                            }

                        }
                    });
                }

            });
//funcion del boton 1
            btn1.setOnAction(new EventHandler<ActionEvent>() {
                @Override
                public void handle(ActionEvent event) {
                    if (nick.getText().equals("")) {
                        Alert alert = new Alert(Alert.AlertType.ERROR);
                        alert.setTitle("Error");
                        alert.setHeaderText("Nick");
                        String s = "Ingresar nick para poder guardar datos de la partida.";
                        alert.setContentText(s);

                        alert.show();
                    } else {
                        pathTransitionL.play();

                        pathTransition.play();
                        pathTransition2.play();
                        pathTransition3.play();
                        pathTransition4.play();
                        pathTransition5.play();
                        pathTransitionM1.play();
                        pathTransitionM2.play();
                        pathTransitionM3.play();
                        pathTransitionM4.play();
                        nivel = 1;
                        i = 0;
                        i2 = 0;
                        pstage.setScene(scene1);
                    }
                }

            });

            //Creando los listeners, para cuando choquen moscas y hormigas
            addinglistener(imgvm1, araña, pathTransitionM1);
            addinglistener(imgvm2, araña, pathTransitionM2);
            addinglistener(imgvm3, araña, pathTransitionM3);
            addinglistener(imgvm4, araña, pathTransitionM4);

            addinglistener(imgvh1, araña, pathTransition);
            addinglistener(imgvh2, araña, pathTransition2);
            addinglistener(imgvh3, araña, pathTransition3);
            addinglistener(imgvh4, araña, pathTransition4);
            addinglistener(imgvh5, araña, pathTransition5);
            
            //telarana

//        ImageView is = new ImageView(new Image("telarana.png"));
//        
//        Thread t2 = new Thread(new Runnable() {
//                        @Override
//                        public void run() {
//
//                            Platform.runLater(new Runnable() {
//                                @Override
//                                public void run() {
//                                    try {
//                                        Thread.sleep(5000);
//                                    } catch (InterruptedException ex) {
////                                Logger.getLogger(PaneOrganizer.class.getName()).log(Level.SEVERE, null, ex);
//                                    }
//                                    pathTransitionL.play();
//                                    is.setX(700);
//                                    is.setY(700);
//                                }
//                            });
//                        }
//                    });
//        t2.setDaemon(true);
//        imgvl.translateYProperty().addListener(new ChangeListener<Number>() {
//            @Override
//            public void changed(ObservableValue<? extends Number> observable,
//                    Number oldValue, Number newValue) {
//                if (imgvt.getBoundsInParent().intersects(araña.getBoundsInParent())) {
//                    pathTransitionL.stop();
//                    root1.getChildren().add(is);
//                    is.setFitWidth(10);
//                    is.setFitHeight(10);
//                    is.setX(imgvl.getX());
//                    is.setY(imgvl.getY());
//
//                    imgvt.setX(700);
//                    imgvt.setY(700);
//                    
//                    t2.start();
//
//
//                }
//
//            }
//        });
//        imgvl.translateXProperty().addListener(new ChangeListener<Number>() {
//            @Override
//            public void changed(ObservableValue<? extends Number> observable,
//                    Number oldValue, Number newValue) {
//                if (imgvt.getBoundsInParent().intersects(araña.getBoundsInParent())) {
//                    pathTransitionL.stop();
//                    
//                    is.setX(imgvl.getX());
//                    is.setY(imgvl.getY());
//
//                    imgvt.setX(700);
//                    imgvt.setY(700);
//                    
//                    t2.start();
//
//                }
//
//            }
//        });
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            imgvl.translateYProperty().addListener(new ChangeListener<Number>() {
                @Override
                public void changed(ObservableValue<? extends Number> observable,
                        Number oldValue, Number newValue) {
                    if (imgvl.getBoundsInParent().intersects(araña.getBoundsInParent())) {
                        if (vidas == 1) {
                            vidas--;
                            Alert alert = new Alert(Alert.AlertType.INFORMATION);
                            alert.setTitle("Game Over");
                            alert.setHeaderText("Usted ha perdido :c");
                            String s = "Suerte para la proxima";
                            alert.setContentText(s);
                            alert.show();
                            pstage.close();
                            try {
                                Thread.currentThread().sleep(3000);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(PaneOrganizer.class.getName()).log(Level.SEVERE, null, ex);
                            }

                            alert.close();
                            Jugador p = new Jugador(nick.getText(), posiscionsub.getText(), nivel, puntaje);
                            p.escribir();

                        } else {
                            vidas--;
                            araña.setX(250);
                            araña.setY(250);
                            vidast.setText("Vidas: " + vidas);

                        }
                    }
                }
            });
            imgvl.translateXProperty().addListener(new ChangeListener<Number>() {
                @Override
                public void changed(ObservableValue<? extends Number> observable,
                        Number oldValue, Number newValue) {
                    if (imgvl.getBoundsInParent().intersects(araña.getBoundsInParent())) {
                        if (vidas == 1) {
                            vidas--;
                            Alert alert = new Alert(Alert.AlertType.INFORMATION);
                            alert.setTitle("Game Over");
                            alert.setHeaderText("Usted ha perdido :c");
                            String s = "Suerte para la proxima";
                            alert.setContentText(s);
                            alert.show();
                            pstage.close();
                            try {
                                Thread.sleep(3000);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(PaneOrganizer.class.getName()).log(Level.SEVERE, null, ex);
                            }

                            alert.close();
                            Jugador p = new Jugador(nick.getText(), posiscionsub.getText(), nivel, puntaje);
                            p.escribir();

                        } else {
                            araña.setX(250);
                            araña.setY(250);
                            vidas--;
                            vidast.setText("Vidas: " + vidas);
                        }
                    }
                }
            });
            btn2.setOnAction(new EventHandler<ActionEvent>() {

                @Override
                public void handle(ActionEvent event) {
                    if (list == null) {
                        Alert alert = new Alert(Alert.AlertType.ERROR);
                        alert.setTitle("Error");
                        alert.setHeaderText("No hay jugadores aun");
                        String s = "Primero debe haber jugadores para empezar.";
                        alert.setContentText(s);

                        alert.show();
                    } else {
                        tablaJugador();
                    }
                }
            });

                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    //reloj
            pstage.setOnShown(new EventHandler<WindowEvent>() {
                @Override
                public void handle(WindowEvent event) {
                    Thread t = new Thread(new Runnable() {
                        @Override
                        public void run() {
                            while (true) {
                                Platform.runLater(new Runnable() {
                                    @Override
                                    public void run() {
                                        if (i2 == 60) {
                                            i = 0;
                                            i2 = 0;
                                            posiscionsub.setText("00:00");
                                        } else if (i2 < 10) {
                                            if (i < 60) {
                                                if (i < 10) {
                                                    posiscionsub.setText("0" + i2 + ":0" + i);
                                                    i++;
                                                } else {
                                                    posiscionsub.setText("0" + i2 + ":" + i);
                                                    i++;
                                                }

                                            } else {
                                                i = 0;
                                                i2++;
                                                posiscionsub.setText("0" + i2 + ":0" + i);

                                            }

                                        } else {
                                            if (i < 60) {
                                                if (i < 10) {
                                                    posiscionsub.setText(i2 + ":0" + i);
                                                    i++;
                                                } else {
                                                    posiscionsub.setText(i2 + ":" + i);
                                                    i++;
                                                }

                                            } else {
                                                i = 0;
                                                i2++;
                                                posiscionsub.setText(i2 + ":0" + i);

                                            }
                                        }
                                    }

                                });
                                try {
                                    Thread.sleep(1000);
                                } catch (InterruptedException ex) {
//                                Logger.getLogger(PaneOrganizerConcurrencia.class.getName()).log(Level.SEVERE, null, ex);
                                }

                            }
                        }

                    });
                    t.setDaemon(true);
                    t.start();

                }

            });

            return root;

        }
          public void addinglistener(ImageView n, ImageView a, PathTransition t) {
        n.translateXProperty().addListener(new ChangeListener<Number>() {
            @Override
            public void changed(ObservableValue<? extends Number> observable,
                    Number oldValue, Number newValue) {
                if (a.getBoundsInParent().intersects(n.getBoundsInParent())) {
                    t.stop();
                    n.setLayoutX(0);
                    n.setLayoutX(600);
                    puntaje = puntaje + 100;
                    puntajet.setText("Puntaje: " + puntaje);
                    t.stop();
                    insectos++;
                }
                if (insectos == 9) {
                    insectos++;
                    pathTransitionL.stop();
                    Stage stage0 = new Stage();
                    VBox vbox = new VBox();
                    Label lbq = new Label("Desea Continuar al siguiente nivel?");
                    Button btnq = new Button("Si");
                    Button btnq1 = new Button("No");
                    HBox hbox = new HBox();
                    vbox.setAlignment(Pos.CENTER);
                    hbox.getChildren().addAll(btnq, btnq1);
                    vbox.getChildren().addAll(lbq, hbox);
                    hbox.setSpacing(10);;
                    Scene sceneq = new Scene(vbox, 200, 200);
                    stage0.setTitle("Nivel Completado");
                    stage0.setScene(sceneq);
                    stage0.show();
                    btnq.setOnAction(new EventHandler<ActionEvent>() {
                        @Override
                        public void handle(ActionEvent arg0) {
                            stage.setScene(scene2);
                            stage0.close();
                            nivel = 2;
                        }
                    });
                    btnq1.setOnAction(new EventHandler<ActionEvent>() {
                        @Override
                        public void handle(ActionEvent arg0) {
                            stage0.close();
                            stage.close();
                            Jugador p = new Jugador(nick.getText(), posiscionsub.getText(), nivel, puntaje);
                            list.add(p);
                            p.escribir();

                        }
                    });

                }
                if (insectos == moscas2 + hormigas2 + 10) {
                    Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setTitle("Woooooooo");
                    alert.setHeaderText("Felicidades");
                    String s = "Usted ha ganado";
                    alert.setContentText(s);

                    alert.show();
                    stage.close();
                    try {
                        Thread.sleep(3000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(PaneOrganizer.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    alert.close();
                    Jugador p = new Jugador(nick.getText(), posiscionsub.getText(), nivel, puntaje);
                    p.escribir();
                    insectos++;

                }
            }
        });
        n.translateYProperty().addListener(new ChangeListener<Number>() {
            @Override
            public void changed(ObservableValue<? extends Number> observable,
                    Number oldValue, Number newValue) {
                if (a.getBoundsInParent().intersects(n.getBoundsInParent())) {
                    t.stop();
                    n.setLayoutX(0);
                    n.setLayoutX(600);
                    puntaje = puntaje + 100;
                    puntajet.setText("Puntaje: " + puntaje);
                    t.stop();
                    insectos++;
                }
                if (insectos == 9) {
                    insectos++;
                    pathTransitionL.stop();
                    Stage stage0 = new Stage();
                    VBox vbox = new VBox();
                    Label lbq = new Label("Desea Continuar al siguiente nivel?");
                    Button btnq = new Button("Si");
                    Button btnq1 = new Button("No");
                    HBox hbox = new HBox();
                    vbox.setAlignment(Pos.CENTER);
                    hbox.getChildren().addAll(btnq, btnq1);
                    vbox.getChildren().addAll(lbq, hbox);
                    hbox.setSpacing(10);;
                    Scene sceneq = new Scene(vbox, 200, 200);
                    stage0.setTitle("Nivel Completado");
                    stage0.setScene(sceneq);
                    stage0.show();
                    btnq.setOnAction(new EventHandler<ActionEvent>() {
                        @Override
                        public void handle(ActionEvent arg0) {
                            stage.setScene(scene2);
                            stage0.close();
                            nivel = 2;
                        }
                    });
                    btnq1.setOnAction(new EventHandler<ActionEvent>() {
                        @Override
                        public void handle(ActionEvent arg0) {
                            stage0.close();
                            stage.close();
                            Jugador p = new Jugador(nick.getText(), posiscionsub.getText(), nivel, puntaje);
                            list.add(p);
                            p.escribir();

                        }
                    });

                }
                if (insectos == moscas2 + hormigas2 + 10) {
                    Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setTitle("Woooooooo");
                    alert.setHeaderText("Felicidades");
                    String s = "Usted ha ganado";
                    alert.setContentText(s);

                    stage.close();
                    try {
                        Thread.sleep(3000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(PaneOrganizer.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    alert.close();
                    Jugador p = new Jugador(nick.getText(), posiscionsub.getText(), nivel, puntaje);
                    p.escribir();
                    insectos++;

                }

            }
        });

    }